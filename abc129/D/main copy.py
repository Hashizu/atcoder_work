#!/usr/bin/env python3
import sys
import numpy as np


# TLE
def solve(H: int, W: int, S: "List[str]"):
    S = np.array(S)
    s = np.ones((H+2, W+2),dtype=np.int)
    s[1:-1,1:-1] = S
    sh = np.ravel(s)
    sw = np.ravel(s.T)

    def lamp(a):
        left = np.arange(len(a))
        left[a==0] = 0
        np.maximum.accumulate(left, out=left)

        right = np.arange(len(a))
        right[a[::-1]==0] = 0
        np.maximum.accumulate(right, out=right)
        right = len(a) - right[::-1]
        k = (right-left) - 2
        k[a==1] =0

        return k

    
    s = lamp(sh)+ np.ravel(lamp(sw).reshape(W+2,H+2).T) 

    print(max(s)-1)

    return


# Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    H = int(next(tokens))  # type: int
    W = int(next(tokens))  # type: int
    S = [[ int(_.replace(".", "0").replace("#", "1")) for _ in next(tokens)] for _ in range(H)]  # type: "List[str]"
    solve(H, W, S)

if __name__ == '__main__':
    main()
