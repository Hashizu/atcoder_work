#!/usr/bin/env python3
import sys

MOD = 1000000007  # type: int

from collections import deque

class UnionFind:
    def __init__(self, num):
        self.par = list(range(1,num+1))
        self.size = [1]*num
    
    def root(self, n):
        if self.par[n-1] == n: return n
        self.par[n-1] = self.root(self.par[n-1])
        return self.par[n-1]

    def unite(self, a, b):
        a=self.root(a)
        b=self.root(b)
        if a!=b:
            self.par[b-1]=a
            self.size[a-1] += self.size[b-1]
        return
    
    def get_size(self, n):
        return self.size[self.root(n)-1]



def solve(N: int, P: "List[int]"):
    union = UnionFind(N)

    hate = []
    for i, p in enumerate(P):
        if p!=-1:
            union.unite(i+1, p)
        else:
            hate.append(i)
    
    [union.root(t) for t in range(1,N+1)]

    rs = set(union.par)
    
    base = 0
    for r in rs:
        base += union.get_size(r)-1
    print(ans)
    # print((ans+hate) * pow(N-1,hate,MOD) % MOD)

    for h in hate:
        

    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    P = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, P)

if __name__ == '__main__':
    main()
