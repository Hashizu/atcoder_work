#!/usr/bin/env python3
import sys
import numpy as np

def solve(N: int, A: "List[int]"):
    # k = (np.argsort(A)+1)
    # print(*k)

    ind = list(range(N))
    def quick_sort(arr, arg):
        ref = arr[0]
        left = []
        lefti = []
        right = []
        righti = []
        same = []
        samei = []
        for x, i in zip(arr, arg):
            if x < ref:
                left.append(x)
                lefti.append(i)
            elif x > ref : 
                right.append(x)
                righti.append(i)
            else :
                same.append(x)
                samei.append(i)
        if left!=[]: left, lefti = quick_sort(left, lefti)
        if right!=[]: right, righti = quick_sort(right, righti)
        return left + same + right, lefti + samei + righti
    _, p = quick_sort(A, ind)
    p = [l+1 for l in p]
    print(*p)

    return


# Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, A)

if __name__ == '__main__':
    main()
