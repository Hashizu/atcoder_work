#!/usr/bin/env python3
import sys

min_r = 200

def solve(H: int, W: int, s: "List[str]"):
    global min_r
    def cal_c(cmp, y, x, pre):
        global min_r
        if cmp < min_r :
            if ((y==H-1)&(x==W-1)):
                min_r = cmp+((pre ==".")&(s[y][x]=="#"))*1
            else:
                k = ((pre==".")&(s[y][x]=="#"))*1
                if y < H-1:
                    cal_c(cmp+k, y+1, x, s[y][x])
                if x < W-1:
                    cal_c(cmp+k, y, x+1, s[y][x])

    cal_c(0, 0, 0, ".")
    print(min_r)

    return


# Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    H = int(next(tokens))  # type: int
    W = int(next(tokens))  # type: int
    s = [next(tokens) for _ in range(W)]  # type: "List[str]"
    solve(H, W, s)

if __name__ == '__main__':
    main()
