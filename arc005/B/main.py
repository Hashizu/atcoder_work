#!/usr/bin/env python3
import sys


def solve(x: int, y: int, W: str, c: "List[str]"):
    nx_c =x-1
    ny_c =y-1
    n_x = 0
    n_y = 0
    if "R" in W:n_x=1
    if "L" in W:n_x=-1
    if "U" in W:n_y=-1
    if "D" in W:n_y=1
    # print(n_x, n_y)
    pas = [""]*4
    pas[0] = c[ny_c][nx_c]
    for i in range(1,4):    
        x_c = nx_c+n_x
        y_c = ny_c+n_y
        if x_c == 9 or x_c == -1:
            n_x *= -1
        if y_c == 9 or y_c == -1:
            n_y *= -1
        nx_c = nx_c+n_x
        ny_c = ny_c+n_y
        pas[i] = c[ny_c][nx_c]

    print("".join(pas))
    
    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    x = int(next(tokens))  # type: int
    y = int(next(tokens))  # type: int
    W = next(tokens)  # type: str
    c = [next(tokens) for _ in range(9)]  # type: "List[str]"
    solve(x, y, W, c)

if __name__ == '__main__':
    main()
