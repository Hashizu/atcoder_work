#!/usr/bin/env python3
import sys

def solve(N: int, M: int, A: "List[int]"):
    a = sorted(A, reverse=True)
    bsum = 0
    p = []
    for day in range(M, -1, -1):
        rem = []
        for i, a_ in enumerate(a):
            if a_[0]==day:
                rem.append(i)
            else:
                for k in rem:
                    p.append(a.pop(k)[1])
                break

        # print("day : {}, a:{}, p:{}".format(day, a, p))
        if len(p)>0:
            p_max = max(p)
            bsum += p_max
            p.remove(p_max)

    print(bsum)
    return


# Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    A = []

    for i in range(N):
        A.append((M-int(next(tokens)),int(next(tokens))))
    solve(N, M, A)

if __name__ == '__main__':
    main()
