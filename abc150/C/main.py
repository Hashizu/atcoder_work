#!/usr/bin/env python3
import sys
import math

def solve(N: int, P: "List[int]", Q: "List[int]"):
    cnta = 0
    cntb = 0

    for i, x in enumerate(P):
        p_ = x-1
        for y in range(i):
            if P[y] < x : p_-=1
        cnta += p_ * math.factorial(N - 1 - i)
    for i, x in enumerate(Q):
        p_ = x-1
        for y in range(i):
            if Q[y] < x : p_-=1
        cntb += p_ * math.factorial(N - 1 - i)
    # print(cnta, cntb)
    print(abs(cnta-cntb))

    return


# Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    P = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    Q = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, P, Q)

if __name__ == '__main__':
    main()
