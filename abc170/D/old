#!/usr/bin/env python3
import sys
from collections import deque


def solve(N: int, A: "List[int]"):
    s = sorted(A)
    s = deque(s)
    min_s = s[0]
    max_s = s[-1]
    lim = int(-(-max_s**0.5//1))+1
    if min_s == 1:
        print((A.count(1)==1)*1)
        return
    
    ans = 0
    # print(s)
    temp = s.popleft()
    ct = 1
    while (len(s)>0) and (s[0] == temp) :
        ct+=1
        temp = s.popleft()
    if ct==1: ans+=1
    # print(ct)
    # print(temp)
    while (len(s)>0):
        new_s = deque()
        while(len(s)>0):
            t = s.popleft()
            if t%temp!=0:
                new_s.append(t)
        s = new_s
        temp = s.popleft()
        ct = 1
        while (len(s)>0) and (s[0] == temp) :
            ct+=1
            temp = s.popleft()
        if ct==1: ans+=1
        # print(temp, s)
        
    print(ans + len(s))

    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, A)

if __name__ == '__main__':
    main()
