#!/usr/bin/env python3
import sys

class Node:
    def __init__(self, h):
        self.high = h
        self.ne_max = 0

    def set_ne(self, h):
        self.ne_max = max(self.ne_max, h)

    def isg(self):
        return 1 * (self.high > self.ne_max)

def solve(N: int, M: int, H: "List[int]", A: "List[int]", B: "List[int]"):
    nodes = [Node(h) for h in H]

    for ai, bi in zip(A,B):
        nodes[ai-1].set_ne(nodes[bi-1].high)
        nodes[bi-1].set_ne(nodes[ai-1].high)

    print(sum([n.isg() for n in nodes]))

    return


# Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    H = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    A = [int()] * (M)  # type: "List[int]"
    B = [int()] * (M)  # type: "List[int]"
    for i in range(M):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    solve(N, M, H, A, B)

if __name__ == '__main__':
    main()
