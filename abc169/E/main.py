#!/usr/bin/env python3
import sys


def solve(N: int, A: "List[int]", B: "List[int]"):
    As = sorted(A)
    Bs = sorted(B)

    if N % 2 == 1:
        min_ = As[(N-1)//2]
        max_ = Bs[(N-1)//2]

        print(max_-min_ + 1)
    else:
        min_1 = As[N//2]
        # if N <= 2: min_2 = min_1
        min_2 = As[N//2-1]
        min_ = (min_1 + min_2)/2
        max_1 = Bs[N//2]
        # if N <= 2: max_2 = max_1
        max_2 = Bs[N//2-1]
        max_ = (max_1 + max_2)/2
        # print(min_, max_)
        print(int((max_ - min_)//0.5 + 1))


    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int()] * (N)  # type: "List[int]"
    B = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    solve(N, A, B)

if __name__ == '__main__':
    main()
