#!/usr/bin/env python3
import sys

class prof:
    def __init__(self, num):
        self.num = num
        self.friends = []
        self.blocks = []        
        self.clus = -1
        self.ca = 0

    def set_friends(self, fre):
        self.friends.append(fre)

    def set_blocks(self, blo):
        self.blocks.append(blo)

    def set_clus(self, cl):
        self.clus = cl
    
    def set_ca(self, c):
        self.ca = c 



def solve(N: int, M: int, K: int, A: "List[int]", B: "List[int]", C: "List[int]", D: "List[int]"):

    nodes = [prof(i) for i in range(N)]

    for ai, bi in zip(A, B):
        nodes[ai-1].set_friends(bi)
        nodes[bi-1].set_friends(ai)
    for ai, bi in zip(C, D):
        nodes[ai-1].set_blocks(bi)
        nodes[bi-1].set_blocks(ai)
    
    prof_l = set(list(range(1,N+1)))
    done_l = []
    q = []
    c_num = 0

    while len(done_l) != N:
        # print("len done : {}".format(len(done_l)))
        # print(done_l)
        q.append((prof_l - set(done_l)).pop())
        while (len(q)) > 0:
            p_nm = q.pop(0)
            nodes[p_nm-1].set_clus(c_num)
            done_l.append(p_nm)

            add_q = list(set(nodes[p_nm-1].friends) - set(done_l))
            q.extend(add_q)
            q = list(set(q))
        c_num += 1
        done_l = list(set(done_l))

    # print([x.clus for x in nodes])

    clus_s = [[] for _ in range(c_num)]
    for i, x in enumerate(nodes):
        clus_s[x.clus-1].append(i+1)

    clus_s = [set(x) for x in clus_s]
    # print(clus_s)
    # print(c_num)
    for cs_i in range(c_num):
        cs = clus_s[cs_i]
        for c in cs:
            nodes[c-1].set_ca(len(cs - set(nodes[c-1].blocks) - set(nodes[c-1].friends)) -1 )

    print(*[x.ca for x in nodes])



    return


# Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    A = [int()] * (M)  # type: "List[int]"
    B = [int()] * (M)  # type: "List[int]"
    for i in range(M):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    C = [int()] * (K)  # type: "List[int]"
    D = [int()] * (K)  # type: "List[int]"
    for i in range(K):
        C[i] = int(next(tokens))
        D[i] = int(next(tokens))
    solve(N, M, K, A, B, C, D)

if __name__ == '__main__':
    main()
